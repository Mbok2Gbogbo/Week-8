import tkinter as tk

class TaxCalculator:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Tax Calculator")
        
        # Create title bar with move functionality
        title_bar = tk.Frame(self.window, bg="blue")
        title_bar.pack(side="top", fill="x")
        title_bar.bind("<ButtonPress-1>", self.move_start)
        title_bar.bind("<ButtonRelease-1>", self.move_stop)
        title_bar.bind("<B1-Motion>", self.move_window)
        
        # Create colored disks for quit, minimize, and zoom
        quit_button = tk.Button(title_bar, bg="red", command=self.quit)
        quit_button.pack(side="left")
        
        minimize_button = tk.Button(title_bar, bg="yellow", command=self.minimize)
        minimize_button.pack(side="left")
        
        zoom_button = tk.Button(title_bar, bg="green", command=self.zoom)
        zoom_button.pack(side="left")
        
        # Create labels and entry fields
        gross_income_label = tk.Label(self.window, text="Gross Income")
        gross_income_label.pack()
        self.gross_income_entry = tk.Entry(self.window)
        self.gross_income_entry.pack()

        
        dependents_label = tk.Label(self.window, text="Dependents")
        dependents_label.pack()
        self.dependents_entry = tk.Entry(self.window)
        self.dependents_entry.pack()
        
        total_tax_label = tk.Label(self.window, text="Total Tax")
        total_tax_label.pack()
        self.total_tax_entry = tk.Entry(self.window, state="readonly")
        self.total_tax_entry.pack()
        
        # Create compute button
        compute_button = tk.Button(self.window, text="Compute", command=self.compute_tax)
        compute_button.pack()
        
        # Set default values for entry fields
        self.gross_income_entry.insert(0, "0.0")
        self.dependents_entry.insert(0, "0")
        self.total_tax_entry.insert(0, "0.0")

    def move_start(self, event):
        self.window.x = event.x
        self.window.y = event.y
        
    def move_stop(self, event):
        self.window.x = None
        self.window.y = None
        
    def move_window(self, event):
        x = (event.x_root - self.window.x)
        y = (event.y_root - self.window.y)
        self.window.geometry("+%s+%s" % (x, y))
        
    def quit(self):
        self.window.quit()
        
    def minimize(self):
        self.window.iconify()
        
    def zoom(self):
        if self.window.state() == "zoomed":
            self.window.state("normal")
        else:
            self.window.state("zoomed")

    def compute_tax(self):
        gross_income = float(self.gross_income_entry.get())
        dependents = int(self.dependents_entry.get())
        # Perform tax calculation based on input values
        total_tax = 0.0
        self.total_tax_entry.configure(state="normal")
        self.total_tax_entry.delete(0, tk.END)
        self.total_tax_entry.insert(0, str(total_tax))
        self.total_tax_entry.configure(state="readonly")
        
    def run(self):
        self.window.mainloop()

# Instantiate and run the TaxCalculator program
calculator = TaxCalculator()
calculator.run()
